cmake_minimum_required(VERSION 2.8)
project (sockman)
INCLUDE_DIRECTORIES(CPPSocket json .)
AUX_SOURCE_DIRECTORY("." DIR_SRCS)
AUX_SOURCE_DIRECTORY("log4z" DIR_SRCS)
IF (CMAKE_SYSTEM_NAME MATCHES "Windows")
AUX_SOURCE_DIRECTORY("CPPSocket" DIR_SRCS)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows")

SET(SOCKMAN ${DIR_SRCS})
MESSAGE(STSTUS "###################################")
MESSAGE(STATUS "operation system is ${CMAKE_SYSTEM}")
 
IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
	MESSAGE(STATUS "current platform: Linux ")
	ADD_EXECUTABLE(${PROJECT_NAME} ${SOCKMAN})
	find_package(Threads)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} "m ${CMAKE_THREAD_LIBS_INIT}")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
	MESSAGE(STATUS "current platform: Windows")
	ADD_EXECUTABLE(${PROJECT_NAME} ${SOCKMAN})
	find_package(Threads)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CMAKE_THREAD_LIBS_INIT})
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
	MESSAGE(STATUS "current platform: FreeBSD")
	ADD_EXECUTABLE(${PROJECT_NAME} ${SOCKMAN})
	find_package(Threads)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} "m ${CMAKE_THREAD_LIBS_INIT}")
ELSE ()
	MESSAGE(STATUS "other platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
 
MESSAGE(STSTUS "###################################")


 
